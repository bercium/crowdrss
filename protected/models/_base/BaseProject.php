<?php

/**
 * This is the model base class for the table "project".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Project".
 *
 * Columns in table "project" available as properties of the model,
 * followed by relations of table "project" available as properties of the model.
 *
 * @property integer $id
 * @property integer $platform_id
 * @property integer $category_id
 * @property string $title
 * @property string $description
 * @property string $image
 * @property string $link
 * @property string $start
 * @property string $end
 * @property string $location
 * @property string $creator
 * @property integer $creator_created
 * @property integer $creator_backed
 * @property string $goal
 * @property integer $type_of_funding
 * @property string $time_added
 *
 * @property Platform $platform
 * @property Category $category
 */
abstract class BaseProject extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'project';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Project|Projects', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('platform_id, category_id, title, description, image, link, time_added', 'required'),
			array('platform_id, category_id, creator_created, creator_backed, type_of_funding', 'numerical', 'integerOnly'=>true),
			array('title, image, link, location, creator', 'length', 'max'=>255),
			array('description', 'length', 'max'=>1000),
			array('goal', 'length', 'max'=>20),
			array('start, end', 'safe'),
			array('start, end, location, creator, creator_created, creator_backed, goal, type_of_funding', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, platform_id, category_id, title, description, image, link, start, end, location, creator, creator_created, creator_backed, goal, type_of_funding, time_added', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'platform' => array(self::BELONGS_TO, 'Platform', 'platform_id'),
			'category' => array(self::BELONGS_TO, 'Category', 'category_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'platform_id' => null,
			'category_id' => null,
			'title' => Yii::t('app', 'Title'),
			'description' => Yii::t('app', 'Description'),
			'image' => Yii::t('app', 'Image'),
			'link' => Yii::t('app', 'Link'),
			'start' => Yii::t('app', 'Start'),
			'end' => Yii::t('app', 'End'),
			'location' => Yii::t('app', 'Location'),
			'creator' => Yii::t('app', 'Creator'),
			'creator_created' => Yii::t('app', 'Creator Created'),
			'creator_backed' => Yii::t('app', 'Creator Backed'),
			'goal' => Yii::t('app', 'Goal'),
			'type_of_funding' => Yii::t('app', 'Type Of Funding'),
			'time_added' => Yii::t('app', 'Time Added'),
			'platform' => null,
			'category' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('platform_id', $this->platform_id);
		$criteria->compare('category_id', $this->category_id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('link', $this->link, true);
		$criteria->compare('start', $this->start, true);
		$criteria->compare('end', $this->end, true);
		$criteria->compare('location', $this->location, true);
		$criteria->compare('creator', $this->creator, true);
		$criteria->compare('creator_created', $this->creator_created);
		$criteria->compare('creator_backed', $this->creator_backed);
		$criteria->compare('goal', $this->goal, true);
		$criteria->compare('type_of_funding', $this->type_of_funding);
		$criteria->compare('time_added', $this->time_added, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}